"""
四级指数编号 - ZS341
四级指数 - 服务需求指数
指数说明 - 劳动关系纠纷、社会福利、社会保障、社会事业等的需求分布
计算方式 - 网格内劳动关系纠纷、社会福利、社会保障、社会事业等相关诉求案件的数量
评价方式 - 负向评价
权重 - 1
预警阈值 - max(10%）
分级规则 - 四分之一数，中位数，四分之三数
备注 - 无
"""
import tqdm

import pandas as pd

from utils import read_source, new_df_until_someday, get_gt
from utils import regression_test


def dataframe_preprocess(file_path, sheetname=0):
    """
    读取源文件并简化
    :param file_path:
    :param sheetname:
    :return:
    """
    df = read_source(file_path, sheetname=sheetname)

    # 一次筛选
    # 筛选后大类名称: 服务项目, 劳动与社会保障(包含劳动关系与纠纷, 社会福利与保障), 矛盾纠纷, 社会事业, 特殊行业监管
    df = df[df["问题类型"] == "社会服务管理"]
    # filter with ['当前阶段'] == '[作废]'
    df = df[df['当前阶段'] != '[作废]']  # 根据2019.9.18与网格中心考评处的沟通, 不考虑作废案件

    # keep only useful columns, to reduce too many dimensions
    df = df[['问题来源', '问题类型', '大类名称', '小类名称', '街道', '上报时间', '当前阶段', '处置截止时间', '处置结束时间']]

    return df


def convert_to_new_dataframe(srs_df, write_path=''):
    # 读取文件
    srs_df["上报日期"] = srs_df["上报时间"].dt.date
    df_gt = pd.read_excel("../source_data/ZS341 - 服务需求指数.xlsx")
    df_gt.set_index(df_gt["日期"], inplace=True)

    index = srs_df["上报日期"].value_counts().index
    index = sorted(index)

    # 定义新表
    # TODO: 替换为全类别 (现有的可能不够全)
    """
    ['事件',
     '矛盾纠纷',
     '服务项目',
     '社会面防控',
     '事故灾难类',
     '特种行业',
     '社会事业',
     '劳动与社会保障',
     '部件',
     '特殊行业监管',
     '扩展事件',
     '市容环境',
     '施工管理',
     '街面秩序',
     '宣传广告',
     '公共设施',
     '园林绿化',
     '道路交通',
     '突发事件',
     nan,
     '垃圾不落地',
     '公共卫生类',
     '社会安全类',
     '自然灾害类',
     '垃圾分类',
     '大气类环境监管扩展事件',
     '房屋土地',
     '社会治安',
     '事件-市容环境',
     '事件-施工管理',
     '事件-街面秩序',
     '事件-宣传广告',
     '矛盾纠纷-民事纠纷',
     '矛盾纠纷-物业纠纷',
     '矛盾纠纷-经济纠纷',
     '矛盾纠纷-房屋征收纠纷',
     '服务项目-社区基本公共服务',
     '服务项目-行政许可事项',
     '服务项目-证件、登记办理',
     '社会面防控-人口管理',
     '社会面防控-维稳防控',
     '事故灾难类-产品及场所安全监管',
     '事故灾难类-环境污染和生态破坏',
     '事故灾难类-公共设施设备及服务供应',
     '事故灾难类-消防安全',
     '事故灾难类-场所事故监管',
     '事故灾难类-施工安全',
     '事故灾难类-交通运输',
     '特种行业-旅馆业',
     '特种行业-机动车修理、报废',
     '特种行业-旧货、典当业',
     '社会事业-教育监管',
     '社会事业-文化监管',
     '社会事业-民政事务监管',
     '社会事业-体育监管',
     '社会事业-精神文明建设',
     '社会事业-商务监管',
     '社会事业-卫生监管',
     '社会事业-旅游监管',
     '社会事业-环境风貌保护',
     '劳动与社会保障-社会福利与保障',
     '劳动与社会保障-劳动关系与纠纷',
     '劳动与社会保障-劳动就业',
     '部件-道路交通',
     '部件-市容设施',
     '部件-公共设施',
     '特殊行业监管-房屋管理',
     '特殊行业监管-家庭服务业',
     '特殊行业监管-家装、工程造价咨询',
     '特殊行业监管-特殊买卖（烟草、犬）销售',
     '特殊行业监管-安保行业',
     '扩展事件-集合站队',
     '扩展事件-可移动垃圾箱问题',
     '扩展事件-高空悬吊作业',
     '扩展事件-扩展事件',
     '扩展事件-现场加工铝合金',
     '扩展事件-井下作业',
     '市容环境-绿地脏乱',
     '市容环境-暴露垃圾',
     '市容环境-废弃家具设备',
     '市容环境-其他市容环境问题',
     '市容环境-道路不洁',
     '市容环境-积存垃圾渣土',
     '市容环境-废弃车辆',
     '市容环境-道路破损',
     '市容环境-动物尸体清理',
     '市容环境-果皮箱',
     '市容环境-地锁',
     '市容环境-非装饰性树挂',
     '市容环境-私搭乱建',
     '市容环境-乱倒、乱排污水废水',
     '市容环境-建筑物外立面不洁',
     '市容环境-户外广告',
     '市容环境-焚烧垃圾、树叶',
     '市容环境-水域秩序问题',
     '市容环境-垃圾箱',
     '市容环境-道路遗撒',
     '市容环境-公厕指示牌',
     '市容环境-牌匾标识',
     '市容环境-门前保洁',
     '市容环境-nan',
     '施工管理-施工废弃料',
     '施工管理-工地扬尘',
     '施工管理-施工占道',
     '施工管理-施工工地道路未硬化',
     '施工管理-无证掘路',
     '施工管理-施工工地围挡问题',
     '施工管理-其它施工管理问题',
     '施工管理-擅自设置堆土点',
     '街面秩序-机动车乱停放',
     '街面秩序-无照经营游商',
     '街面秩序-黑车拉客',
     '街面秩序-店外经营',
     '街面秩序-流浪乞讨',
     '街面秩序-商业噪音',
     '街面秩序-非机动车乱停放',
     '街面秩序-沿街晾挂',
     '街面秩序-占道废品收购',
     '街面秩序-乱堆物堆料',
     '街面秩序-其它街面秩序问题',
     '街面秩序-空调室外机低挂',
     '宣传广告-违规户外广告',
     '宣传广告-非法小广告',
     '宣传广告-违规牌匾标识',
     '宣传广告-违规标语宣传品',
     '宣传广告-街头散发广告',
     '宣传广告-其他宣传广告问题',
     '公共设施-电力设施',
     '公共设施-上水井盖',
     '公共设施-通讯交接箱',
     '公共设施-雨水井盖',
     '公共设施-路灯井盖',
     '公共设施-消防设施',
     '公共设施-通讯井盖',
     '公共设施-监控电子眼',
     '公共设施-污水井盖',
     '公共设施-燃气调压站（箱）',
     '公共设施-雨水箅子',
     '公共设施-热力井盖',
     '公共设施-电话亭',
     '公共设施-路灯',
     '公共设施-不明井盖',
     '公共设施-报刊亭',
     '公共设施-电力井盖',
     '公共设施-景观灯',
     '公共设施-公安井盖',
     '公共设施-健身设施',
     '公共设施-园林井盖',
     '公共设施-地灯',
     '公共设施-有线电视井盖',
     '园林绿化-绿地护栏',
     '园林绿化-绿地',
     '园林绿化-行道树',
     '园林绿化-花架花钵',
     '园林绿化-街头座椅',
     '园林绿化-护树设施',
     '园林绿化-雕塑',
     '园林绿化-古树名木',
     '道路交通-交通护栏',
     '道路交通-公交站亭',
     '道路交通-便道桩',
     '道路交通-交通标志牌',
     '道路交通-存车支架',
     '道路交通-消能桶',
     '道路交通-信号灯电源井盖',
     '道路交通-交通信号设施',
     '道路交通-交通信号灯',
     '道路交通-停车场',
     '道路交通-路名牌',
     '道路交通-出租车站牌',
     '突发事件-架空线缆不规范',
     '突发事件-病虫害',
     '突发事件-路面塌陷',
     '突发事件-自来水管破裂',
     '突发事件-其他突发事件',
     '突发事件-群发性事件',
     '突发事件-道路积水',
     '突发事件-下水道堵塞或破损',
     '突发事件-热力管道破裂',
     '垃圾不落地-垃圾堆放',
     '垃圾不落地-垃圾桶设置问题',
     '公共卫生类-食药安全',
     '公共卫生类-公众健康和生命安全',
     '社会安全类-经济安全',
     '自然灾害类-地质灾害',
     '自然灾害类-灾害预防和救助',
     '垃圾分类-投放效果',
     '垃圾分类-投放站点运行',
     '垃圾分类-分类作业',
     '垃圾分类-指导员工作',
     '垃圾分类-分类收集车辆',
     '大气类环境监管扩展事件-新增污染源',
     '房屋土地-宣传栏',
     '社会治安-治安事件',
     '案件总数',
     '当天案件总数',
     '自行处理案件总数',
     '日期',
     '街道',
     '原指标']
    """
    # keys = srs_df["大类名称"].unique().tolist()  # 键
    # for kl1 in keys:
    #     tmp = srs_df[srs_df["大类名称"] == kl1]
    #     kl2 = tmp["小类名称"].unique().tolist()
    #     kl2 = ["{}/{}".format(kl1, k) for k in kl2]
    #     keys.extend(kl2)
    keys = srs_df.groupby(["大类名称", "小类名称"]).count().index.tolist()
    keys.extend([("案件总数", ''), ("当天案件总数", ''), ("自行处理案件总数", ''), ("日期", ''), ("街道", ''), ("原指标", '')])
    res = pd.DataFrame(index=keys)

    j = 0
    for i in tqdm.trange(len(index)):
        day = index[i]
        assert day is not None

        for area in ["东华门", "景山", "交道口", "安定门", "北新桥", "东四", "朝阳门", "建国门", "东直门", "和平里",
                     "前门", "崇外", "东花市", "龙潭", "体育馆", "天坛", "永定门外"]:  # 和网格代码顺序一致, 方便后续观察对比
            # tqdm.tqdm.write(area)
            df, df_self = new_df_until_someday(srs_df, area, day, write_path=write_path)
            df = df[-(df["处置结束时间"] < pd.Timestamp(day))]

            # 获取原指标
            gt = get_gt(df_gt, area, day)

            # 截至统计日, 所有未完成的案件
            n1 = len(df)  # 社会服务管理案件总数
            # 统计日当日, 未完成的案件
            n2 = len(df[df["上报时间"].dt.date == day])  # 当天案件总数
            # 自行处理的案件总数
            n3 = len(df_self)

            # 分类统计
            # s1 = df.groupby("大类名称").count()["上报时间"]
            # s2 = df.groupby("小类名称").count()["上报时间"]
            # s = s1.append(s2)
            s = df.groupby(["大类名称", "小类名称"]).count()["上报时间"]
            s["案件总数"] = n1
            s["当天案件总数"] = n2
            s["自行处理案件总数"] = n3
            s["日期"] = day
            s["街道"] = area
            s["原指标"] = gt
            res[j] = s
            j += 1

    res.fillna(0, inplace=True)
    return res.T


if __name__ == "__main__":
    # # source_file = '../queryResult_2019-09-10_145030_zs341.xlsx'
    # source_file = '../queryResult_2019-09-10_145030.npy'
    # df1 = dataframe_preprocess(source_file)
    #
    # df2 = convert_to_new_dataframe(df1, write_path='../tmp_zs341')
    # df2.to_excel('../zs341_20190923.xlsx')

    # regression
    regression_test('../zs341_20190923.xlsx')
